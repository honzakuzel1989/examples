using System;
using AutoFixture;

namespace AutoFixtureLibraryExample
{
    static class Program
    {
        static void Main(string[] args)
        {
            var fixture = new Fixture();
            var autoGeneratedText = fixture.Create<string>();
            int autoGeneratedNumber = fixture.Create<int>();
            var autoGeneratedClass = fixture.Create<ComplexParent>();

            Console.WriteLine(autoGeneratedText);
            Console.WriteLine(autoGeneratedNumber);
            Console.WriteLine(autoGeneratedClass);

            fixture.Register<IComplexType>(() => new ComplexChild());

            var autoGeneratedClass2 = fixture.Create<IComplexType>();

            Console.WriteLine(autoGeneratedClass2);

            Console.ReadLine();
        }
    }

    internal class ComplexParent : IComplexType
    {
        public int X { get; set; }
        public string Y { get; set; }
        public ComplexChild Child { get; set; }

        public override string ToString()
        {
            return $"parrent: {X}, {Y}, {Child}";
        }
    }

    internal interface IComplexType
    {
        public int X { get; set; }
        public string Y { get; set; }
    }

    internal class ComplexChild : IComplexType
    {
        public int X { get; set; }
        public string Y { get; set; }

        public override string ToString()
        {
            return $"child: {X}, {Y}";
        }
    }
}
